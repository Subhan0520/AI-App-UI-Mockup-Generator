import React, { useState } from 'react';
import JSZip from 'jszip';
import { GeneratedScreen } from '../types';

interface ExportControlsProps {
  screens: GeneratedScreen[];
  onExportSuccess: (type: 'React' | 'Flutter') => void;
}

const ReactIcon = () => ( <svg className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="2" fill="currentColor"/><g><ellipse cx="12" cy="12" rx="11" ry="4" stroke="currentColor" strokeWidth="2"/><ellipse cx="12" cy="12" rx="11" ry="4" transform="rotate(60 12 12)" stroke="currentColor" strokeWidth="2"/><ellipse cx="12" cy="12" rx="11" ry="4" transform="rotate(120 12 12)" stroke="currentColor" strokeWidth="2"/></g></svg> );
const FlutterIcon = () => ( <svg className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14.314 0L6.039 8.275L14.314 16.55H22.588L14.314 8.275L22.588 0H14.314Z" fill="currentColor" fillOpacity="0.8"/><path d="M14.314 7.449L22.588 15.724L18.452 19.86L10.176 11.585L14.314 7.449Z" fill="currentColor"/></svg> );

const getReactFileContent = (fileName: string, screens: GeneratedScreen[]) => {
    const componentImports = screens.map(screen => { const componentName = screen.title.replace(/[^a-zA-Z0-9]/g, ''); return `import ${componentName} from './components/${componentName}';`; }).join('\n');
    const componentList = screens.map(screen => { const componentName = screen.title.replace(/[^a-zA-Z0-9]/g, ''); return `<div><h2 className="text-2xl font-bold text-center p-4 bg-gray-800 text-white">${screen.title}</h2><${componentName} /></div>`; }).join('\n');
    switch (fileName) {
        case 'package.json': return JSON.stringify({ name: 'ai-generated-app-react', private: true, version: '0.0.0', type: 'module', scripts: { dev: 'vite', build: 'vite build', preview: 'vite preview' }, dependencies: { react: '^18.2.0', 'react-dom': '^18.2.0' }, devDependencies: { '@vitejs/plugin-react': '^4.0.3', autoprefixer: '^10.4.14', postcss: '^8.4.27', tailwindcss: '^3.3.3', vite: '^4.4.5' }}, null, 2);
        case 'vite.config.js': return `import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({ plugins: [react()] })`;
        case 'tailwind.config.js': return `/** @type {import('tailwindcss').Config} */\nexport default {\n  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],\n  theme: { extend: {} },\n  plugins: [],\n}`;
        case 'postcss.config.js': return `export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}`;
        case 'index.html': return `<!doctype html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Generated React App</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/src/main.jsx"></script>\n  </body>\n</html>`;
        case 'src/main.jsx': return `import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.jsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)`;
        case 'src/index.css': return `@tailwind base;\n@tailwind components;\n@tailwind utilities;\n`;
        case 'src/App.jsx': return `import React from 'react';\n${componentImports}\n\nfunction App() {\n  return (\n    <div className="bg-gray-100 min-h-screen">\n      <div className="space-y-8">\n        ${componentList}\n      </div>\n    </div>\n  )\n}\n\nexport default App`;
        case 'README.md': return `# AI-Generated React App\n\nThis project was generated by the AI App UI Mockup Generator.\n\n## Get Started\n1. Run \`npm install\`\n2. Run \`npm run dev\`\n\nYour app will be running at \`http://localhost:5173\`.\n`;
        default: return '';
    }
}

const createReactZip = async (screens: GeneratedScreen[]) => {
    const zip = new JSZip();
    ['package.json', 'vite.config.js', 'tailwind.config.js', 'postcss.config.js', 'index.html', 'README.md'].forEach(fileName => zip.file(fileName, getReactFileContent(fileName, screens)));
    ['src/main.jsx', 'src/index.css', 'src/App.jsx'].forEach(fileName => zip.file(fileName, getReactFileContent(fileName, screens)));
    const componentsFolder = zip.folder('src/components');
    screens.forEach(screen => { const componentName = screen.title.replace(/[^a-zA-Z0-9]/g, ''); componentsFolder.file(`${componentName}.jsx`, screen.code.react); });
    return zip.generateAsync({ type: 'blob' });
}

const toSnakeCase = (str: string) => str.replace(/[^a-zA-Z0-9]/g, ' ').replace(/\s+/g, '_').toLowerCase();
const getFlutterFileContent = (fileName: string, screens: GeneratedScreen[]) => {
    const screenImports = screens.map(s => `import 'screens/${toSnakeCase(s.title)}.dart';`).join('\n');
    const screenWidgets = screens.map(s => { const componentName = s.title.replace(/[^a-zA-Z0-9]/g, ''); return `Container( margin: const EdgeInsets.only(bottom: 32), child: Column( children: [ Text('${s.title}', style: Theme.of(context).textTheme.headlineMedium), const SizedBox(height: 8), SizedBox( height: 812, child: ${componentName}(), ), ], ), ),`; }).join('\n');
    switch(fileName) {
        case 'pubspec.yaml': return `name: ai_generated_app_flutter\ndescription: A new Flutter project.\npublish_to: 'none'\nversion: 1.0.0+1\n\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n\ndependencies:\n  flutter:\n    sdk: flutter\n  cupertino_icons: ^1.0.2\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  flutter_lints: ^2.0.0\n\nflutter:\n  uses-material-design: true\n`;
        case 'lib/main.dart': return `import 'package:flutter/material.dart';\n${screenImports}\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Generated Flutter App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n        useMaterial3: true,\n      ),\n      home: const MyHomePage(),\n      debugShowCheckedModeBanner: false,\n    );\n  }\n}\n\nclass MyHomePage extends StatelessWidget {\n  const MyHomePage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        backgroundColor: Theme.of(context).colorScheme.inversePrimary,\n        title: const Text('Generated Screens'),\n      ),\n      body: ListView(\n        padding: const EdgeInsets.all(16.0),\n        children: [\n          ${screenWidgets}\n        ],\n      ),\n    );\n  }\n}\n`;
        case 'README.md': return `# AI-Generated Flutter App\n\nThis project was generated by the AI App UI Mockup Generator.\n\n## Get Started\n1. Make sure you have the Flutter SDK installed.\n2. Run \`flutter pub get\`\n3. Run \`flutter run\`\n`;
        default: return '';
    }
}

const createFlutterZip = async (screens: GeneratedScreen[]) => {
    const zip = new JSZip();
    zip.file('pubspec.yaml', getFlutterFileContent('pubspec.yaml', screens));
    zip.file('README.md', getFlutterFileContent('README.md', screens));
    const libFolder = zip.folder('lib');
    libFolder.file('main.dart', getFlutterFileContent('lib/main.dart', screens));
    const screensFolder = libFolder.folder('screens');
    screens.forEach(screen => { screensFolder.file(`${toSnakeCase(screen.title)}.dart`, screen.code.flutter); });
    return zip.generateAsync({ type: 'blob' });
}

export const ExportControls: React.FC<ExportControlsProps> = ({ screens, onExportSuccess }) => {
    const [isZipping, setIsZipping] = useState<'react' | 'flutter' | null>(null);

    const handleExport = async (type: 'react' | 'flutter') => {
        setIsZipping(type);
        try {
            const blob = type === 'react' ? await createReactZip(screens) : await createFlutterZip(screens);
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `ai-generated-app-${type}.zip`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            onExportSuccess(type === 'react' ? 'React' : 'Flutter');
        } catch (error) {
            console.error(`Failed to create ${type} zip file:`, error);
        } finally {
            setIsZipping(null);
        }
    };

    return (
        <div className="flex flex-col sm:flex-row items-center justify-center gap-4">
            <button onClick={() => handleExport('react')} disabled={!!isZipping} className="inline-flex w-full sm:w-auto items-center justify-center bg-base-200 text-base-content font-bold py-3 px-6 rounded-lg hover:bg-primary-focus hover:text-white transition-all duration-300 disabled:opacity-50 disabled:cursor-wait group border border-base-300" >
                <ReactIcon /> {isZipping === 'react' ? 'Packaging React...' : 'Export React Project'}
            </button>
            <button onClick={() => handleExport('flutter')} disabled={!!isZipping} className="inline-flex w-full sm:w-auto items-center justify-center bg-base-200 text-base-content font-bold py-3 px-6 rounded-lg hover:bg-[#027DFD] hover:text-white transition-all duration-300 disabled:opacity-50 disabled:cursor-wait group border border-base-300" >
                <FlutterIcon /> {isZipping === 'flutter' ? 'Packaging Flutter...' : 'Export Flutter Project'}
            </button>
        </div>
    );
};
